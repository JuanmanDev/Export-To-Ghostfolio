name: docker
run-name: Build Docker Container

on:
  push:
    branches:
      - main
    paths:
      - "src/**"
      - "pages"
      - "package.json"
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  workflow_dispatch: # Also allow manual triggering

jobs:
  docker:    
    env:
      dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
      dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
    
    name: Publish Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: "5.x"

      - name: Run GitVersion
        uses: gittools/actions/gitversion/execute@v0.10.2
        with:
          useConfigFile: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{ env.dockerhub_username != '' && env.dockerhub_token != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.dockerhub_username }}
          password: ${{ env.dockerhub_token }}

      - name: Determine image version
    #    shell: bash
        run: |
          if [[ $GITHUB_EVENT_NAME == "pull_request" ]]; then
            echo "IMAGE_VERSION=${{ env.GitVersion_MajorMinorPatch }}-beta" >> $GITHUB_ENV
          else
            echo "IMAGE_VERSION=${{ env.GitVersion_MajorMinorPatch }}" >> $GITHUB_ENV
          fi

      - name: Build and push (PR)
        uses: docker/build-push-action@v5
        if: ${{ github.event_name == 'pull_request' && env.dockerhub_username != '' && env.dockerhub_token != '' }}
        with:
          push: true
          tags: |
            ${{ github.ref_name }}/export-to-ghostfolio:${{ env.IMAGE_VERSION }}
          build-args: |
           IMAGE_VERSION=${{ env.IMAGE_VERSION }}
          platforms: linux/amd64,linux/arm64

      - name: Build and push (main)
        uses: docker/build-push-action@v5
        if: ${{ github.event_name != 'pull_request' && env.dockerhub_username != '' && env.dockerhub_token != '' }}
        with:
          push: true
          tags: |
            ${{ github.ref_name }}/export-to-ghostfolio:latest
            ${{ github.ref_name }}/export-to-ghostfolio:${{ env.IMAGE_VERSION }}
          build-args: |
            IMAGE_VERSION=${{ env.IMAGE_VERSION }}
          platforms: linux/amd64,linux/arm64
            
      # Step 7: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Push Docker image with branch-specific tags
      - name: Push Docker image with branch-specific tags
        run: |
          # Get the repository name and transform it into a valid Docker image name
          REPO_NAME=$(echo "${{ github.repository }}" | awk -F '/' '{print $2}' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g')
          IMAGE_NAME=ghcr.io/${{ github.repository_owner | tr '[:upper:]' '[:lower:]' }}/$REPO_NAME
          
          # Sanitize the branch name to be Docker-compatible
          SANITIZED_BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
          
          # Tag and push the Docker image with branch-specific tags
          docker tag $REPO_NAME:latest $IMAGE_NAME:$SANITIZED_BRANCH_NAME
          docker push $IMAGE_NAME:$SANITIZED_BRANCH_NAME

      # Step 9: Push the 'latest' tag only for the main branch
      - name: Push 'latest' tag for main branch
        if: github.ref == 'refs/heads/main'
        run: |
          # Reuse the repository name transformation logic
          REPO_NAME=$(echo "${{ github.repository }}" | awk -F '/' '{print $2}' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g')
          IMAGE_NAME=ghcr.io/${{ github.repository_owner | tr '[:upper:]' '[:lower:]' }}/$REPO_NAME
          
          # Tag and push the Docker image with the 'latest' tag
          docker tag $REPO_NAME:latest $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest
